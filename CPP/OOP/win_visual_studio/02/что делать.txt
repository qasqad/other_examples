Проект № 1 
Используя массив указателей типа базового класса, просмотреть полиморфные объекты с помощью виртуальной функции show(). 

Порядок выполнения проекта. 

1. Определить иерархию классов (в соответствии с вариантом). 
2. Реализовать классы. 
3. Создать объекты разных классов. 
4. Создать массив указателей типа базового класса. 
5. Инициализировать эти указатели указателями на созданные объекты. 
6.Пройдя по массиву, просмотреть объекты, вызывая виртуальную функцию show(). 
7.Сделать функцию show не виртуальной и посмотреть к чему это приведет. 

Проект № 2 
Включить полиморфные объекты в связанный список, используя статические компоненты класса. Показать использование виртуальных функций. 

Порядок выполнения проекта.

1. Определить иерархию классов (в соответствии с вариантом).
2. Определить в абстрактном классе абстрактную функцию show() для просмотра объекта
3. Определить класс типа item для создания связанного списка. Определить в классе статическую компоненту - указатель на начало связанного списка объектов, функцию 
для добавления объекта и статическую функцию для просмотра списка.
4. Реализовать классы.
5. Написать демонстрационную программу, в которой создаются объекты различных классов и помещаются в список, после чего список просматривается.
6. Сделать соответствующие методы не виртуальными и посмотреть, что будет.

Методические указания.
1. Для определения иерархии классов связать отношением наследования классы, приведенные в приложении (для заданного варианта). 
Из перечисленных классов выбрать один, который будет стоять во главе иерархии. Это абстрактный класс.
2. Определить в классах все необходимые конструкторы и деструктор.
3. Строковые поля определять как string.
4. Компонентные данные класса специфицировать как protected.
5. Пример определения статических компонентов:
	static person* begin; // указатель на начало списка
	static void print(void); // просмотр списка
6. Статическую компоненту - данное инициализировать вне определения класса, в глобальной области.
7. Пример определения класса item :
	class item
		{
			static item* begin;		// указатель на начало списка
			item* next;				// указатель на следующий элемент
			person* p;				// 
			public:
			item(person* p);		// конструктор
			void add();				// добавляет элемент в начало списка.
			static void show();		// показ списка
		};

8. Список просматривать путем вызова виртуального метода show каждого объекта.
9. Статический метод просмотра списка вызывать не через объект, а через класс.
10. Определение классов, их реализацию, демонстрационную программу поместить в отдельные файлы.


				ПЕРСОНА		имя															string
							возраст														short
							пол															bool

(от персоны)	СЛУЖАЩИЙ 
							наименование области (шахтер, металист, строитель)			string
							ЗП															float
							стаж (лет)													float
							% роста в должности											short

(от служащего)	РАБОЧИЙ 
							% удобств в условиях работы									short

(от служащего)	ИНЖЕНЕР 
							уровень разрабатываемых проектов (1-мелк, 2-ср, 3-кр)		short
							количество человек в подчинении								short


_______________________________________________________________________________________________________

Пример. 1.6.1.Связанный список. 

#include <iostream.h> 
//Определение класса 
class item 
{ 
	static item *begin; 
	item *next; 
	char symbol;
	
public: 
	item (char ch)  // конструктор
		{
			symbol = ch;
		}
	
	void add(void); // добавить в начало
	static void print(void);
}; 

//Реализация класса 
void item::add(void)
{
	this–>next = begin; 
	begin = this;
}

void item::print(void)
{
	item *p; 
	p = begin; 
	while(p != NULL )
	{
		cout<<p–>symbol<<"\t";
		p = p–>next;
	}
}

//Создание и просмотр списка 
item *item::begin = NULL; // инициализация статического компонента 
	
void main()
{
		
	item A('a');
	item B('b');
	item C('c');

	// включение объектов в список
	A.add();
	B.add();
	C.add();
		
	// просмотр списка в обратном порядке
	item::print();
}

________________________________________________________________________

class item 
{

	 static item* begin; 
	 item* next; 
	 person* p; 
	 
	 public: 
		item(person* p); 
		void add(); 
		static void show(); 
};